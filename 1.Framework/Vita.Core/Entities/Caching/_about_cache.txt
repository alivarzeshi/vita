There are only two hard things in Computer Science: cache invalidation and naming things. 
  Phil Karlton
  http://martinfowler.com/bliki/TwoHardThings.html

Entity cache implements data caching, automatic, happening in the background, without a need for a specific code in the business logic to lookup data in cache before going to the database. 
The CacheDataStore implements IDataStore interface, and sits between the application (EntityStore/EntityApp) and actual database. Without caching the EntityStore uses Database instance as an IDataStore. With cache, CacheDataStore is a 'data store' for the app. Internally, CacheDataStore either returns data from cache, or redirects the call to actual database (Database class instance).

Inside the CacheDataStore there are 2 types of cache:
1. Full set cache - entire tables are loaded into memory. For entities in full-set cache all data requests (get-by-id, get-by-key, linq queries) are served from cache. Linq query are rewritten to execute against entity lists in memory - expressions are transformed into compiled Linq-to-objects delegates and executed againts in-memory lists. Full-set cache is invalidated and reloaded in 3 cases: 
    a. Lifetime expires (default 5 minutes)
    b. There is an update to any entity in cache
    c. Using versioning mechanism - see below
2. Sparse cache - single records previously retrieved are kept in cache. Only get-by-id requests are served from sparse cache. Results of any select/query returned from the database are put in this cache. Cached records are removed when lifetime expires, or when record is deleted.

Versioning mechanism for full-set cache.
The main problem with cache invalidation is web-farm like environment. An update of cached entity happens through one application server (A), cache is automatically invalidated and refreshed on this server, but when the next request from the user is directed to server B, the cache on server B would not know that it is stale, and needs to be refreshed. As a result, the user might see old version of the cached record. The solution is to assign a version to a cache state and increment it each time we update it. This cache version number is kept in user session, and passed with each data request. For web scenario, the version might be kept in request/response header. So in the scenario described previously, when the cached entity is updated on server A and cached is invalidated, the version is incremented and saved in OperationContext.EntityCacheVersion property, and then returned to client in a custom HTTP header. The client code should save it and send it with the next request. If this next request is routed to server B, the cache in server B would see that user requires cache version that is higher than server B's current version. This will result in cache invalidation and reload.
Automatic handling of cache-version HTTP headers is not implemented yet - it's coming, just figuring out what would be the best way to implement it. It will be done similar to UserSession.SessionVersionToken - that keeps track of user session version, forcing session to be reloaded from the database when version mismatches.        
